General goal:
The goal of this codebase is to calcluate bandflux functions for the SALT3-NIR model using jax. It has been copied directly from sncosmo, and tests have been developed to verify that the outputs of the bandflux function match the sncosmo outputs.

Any code (or imports) used in the likelihood function or the priors must be fully jit compiled. Numpy should not be used anywhere in the codebase, other than data loading functions which are only called once. 


Markdown recipe:

1. Use triple backticks to start and end the outer markdown code block and specify markdown beside your triple backticks. (Use this to start your ____ markup)

2. For the inner code block (for any code examples within your ____ section)
     a. drop a line after any heading and before starting your code block
     b. Indent the code block with 4 spaces. 
     c. Use triple backticks to start and end the inner code block.
     d. Specify the language next to your triple backticks (e.g., javascript) for syntax highlighting. plan markup.)

It is essential that you follow this guidence if I am to be able to use your output.

Anesthetic recipe:

## Loading the chains
samples = read_chains('chains/chains'). The file being loaded here is chains/chains_dead-birth.txt. But in anesthetic all you need to type to do this is samples=read_chains([root]/[root]), where root in this case is 'chains'/ 

## Plotting marginalised 2d posterior distributions
from anesthetic import read_chains, make_2d_axes
samples = read_chains("../../tests/example_data/pc_250")
prior = samples.prior()
params = ['x0', 'x1', 'x2', 'x3', 'x4']
fig, axes = make_2d_axes(params, figsize=(6, 6), facecolor='w')
prior.plot_2d(axes, alpha=0.9, label="prior")
samples.plot_2d(axes, alpha=0.9, label="posterior")
axes.iloc[-1, 0].legend(bbox_to_anchor=(len(axes)/2, len(axes)), loc='lower center', ncols=2)

## Parameter names
To define parameters for plots you must initially create a list of parameter names, like this:

params = ['x0', 'x1', 'x2', 'x3', 'x4']

These must then be passed to samples=read_chains([root]/[root], columns=params).  You then load these when generating the corner plots, for example:

fig, axes = make_2d_axes(params, figsize=(6, 6), facecolor='w')

The only way to load samples in the new anesthetic is to use the read_chains function. Do not use NestedSamples or MCMCSamples as these are depreciated.