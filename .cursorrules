General goal:
The general goal is to re write the bandflux function in sncosmo to be compatible with jax. Currently the bnadflux function which has been re written in jax (in jax_supernovae directory) almost matches, but not exactly. Run testing with the SALT3-NIR model.

The  primary test should be designed to test if the bandfluxes match. If they do, then the code is working. If they dont, then other tests should be designed to figure out which lines of code in the jax bandflux code does not exactly match the original sncosmo code.

So the key points are:

1. The bandflux function written in jax must match the original sncosmo bandflux function. A test should be designed to check this which is run reguarly.
2. If the bandflux does not match, other tests should be designed to figure out which lines of code in the jax bandflux code does not exactly match the original sncosmo code.
3. When a segment of code in the jax version is tested, and confirmed to be working, a comment should be added to that segment of code in the jax version to indicate that it is working.
4. sncosmo/sncosmo/models.py contains the bandflux function and other related functions. sncosmo/sncosmo contains other related functions.

Model files are here:

/home/sam/academic/sn_anomaly2/sncosmo-modelfiles/


Markdown recipe:

1. Use triple backticks to start and end the outer markdown code block and specify markdown beside your triple backticks. (Use this to start your ____ markup)

2. For the inner code block (for any code examples within your ____ section)
     a. drop a line after any heading and before starting your code block
     b. Indent the code block with 4 spaces. 
     c. Use triple backticks to start and end the inner code block.
     d. Specify the language next to your triple backticks (e.g., javascript) for syntax highlighting. plan markup.)

It is essential that you follow this guidence if I am to be able to use your output.

Anesthetic recipe:

## Loading the chains
samples = read_chains('chains/chains'). The file being loaded here is chains/chains_dead-birth.txt. But in anesthetic all you need to type to do this is samples=read_chains([root]/[root]), where root in this case is 'chains'/ 

## Plotting marginalised 2d posterior distributions
from anesthetic import read_chains, make_2d_axes
samples = read_chains("../../tests/example_data/pc_250")
prior = samples.prior()
params = ['x0', 'x1', 'x2', 'x3', 'x4']
fig, axes = make_2d_axes(params, figsize=(6, 6), facecolor='w')
prior.plot_2d(axes, alpha=0.9, label="prior")
samples.plot_2d(axes, alpha=0.9, label="posterior")
axes.iloc[-1, 0].legend(bbox_to_anchor=(len(axes)/2, len(axes)), loc='lower center', ncols=2)

## Parameter names
To define parameters for plots you must initially create a list of parameter names, like this:

params = ['x0', 'x1', 'x2', 'x3', 'x4']

These must then be passed to samples=read_chains([root]/[root], columns=params).  You then load these when generating the corner plots, for example:

fig, axes = make_2d_axes(params, figsize=(6, 6), facecolor='w')

The only way to load samples in the new anesthetic is to use the read_chains function. Do not use NestedSamples or MCMCSamples as these are depreciated.